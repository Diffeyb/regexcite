library(devtools)
use_git()
library(devtools)
strsplit1 <- function(x, split) {
strsplit(x, split = split)[[1]]
}
rm(strsplit1)
use_r("strsplit1")
load_all()
x <- "alfa,bravo,charlie,delta"
strsplit1(x, ",")
check()
use_mit_license()
document()
?strplit1
load_all()
?strsplit1
check()
check()
install()
library(regexcite)
strsplit1(x, ",")
use_testthat()
use_test()
test_that("strsplit1() splits a string", {
expect_equal(strsplit1("a,b,c", split = ","), c("a", "b", "c"))
})
load_all()
test_that("strsplit1() splits a string", {
expect_equal(strsplit1("a,b,c", split = ","), c("a", "b", "c"))
})
test()
use_package("stringr")
rename_files("strsplit1", "str_split_one")
rename_files("str_split_one", "strsplit1")
rename_files("strsplit1", "str_split_one")
test_that("str_split_one() splits a string", {
expect_equal(str_split_one("a,b,c", ","), c("a", "b", "c"))
})
load_all()
document()
load_all()
test_that("str_split_one() splits a string", {
expect_equal(str_split_one("a,b,c", ","), c("a", "b", "c"))
})
test_that("str_split_one() errors if input length > 1", {
expect_error(str_split_one(c("a,b","c,d"), ","))
})
test_that("str_split_one() exposes features of stringr::str_split()", {
expect_equal(str_split_one("a,b,c", ",", n = 2), c("a", "b,c"))
expect_equal(str_split_one("a.b", stringr::fixed(".")), c("a", "b"))
})
str_split_one("a, b, c", pattern = ", ")
str_split_one("a, b, c", pattern = ", ", n = 2)
str_split_one("a, b, c", pattern = ", ", n = 1)
str_split_one("a, b, c", pattern = ", ", n = 3)
create_from_github(https://github.com/Diffeyb/regexcite.git,
create_from_github("https://github.com/Diffeyb/regexcite.git",
destdir = "/Users/user/Library/CloudStorage/OneDrive-TheUniversityofManchester/Github/macbook/")
gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
create_from_github("https://github.com/Diffeyb/regexcite.git",
destdir = "/Users/user/Library/CloudStorage/OneDrive-TheUniversityofManchester/Github/macbook/")
